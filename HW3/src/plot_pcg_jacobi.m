function plot_pcg_jacobi()   [s3, rows, cols, entries] = mmread("s3rmt3m3.mtx");  s3 = sparse(s3);  b = rand(rows,1);  x0 = rand(rows,1);  tol = 1e-6;  maxit = uint32(rows);  s3_j = create_jacobi(rows);  [~, s3_iter, s3_res_vec] = p_cg(s3, b, tol, maxit, x0, s3_j);     [nos5, rows, cols, entries] = mmread("nos5.mtx");  nos5 = sparse(nos5);  b = rand(rows,1);  x0 = rand(rows,1);  tol = 1e-6;  maxit = uint32(rows);  n5_j = create_jacobi(rows);  [~, nos5_iter, nos5_res_vec] = p_cg(nos5, b, tol, maxit, x0, n5_j);    [nos6, rows, cols, entries] = mmread("nos6.mtx");  nos6 = sparse(nos6);  b = rand(rows,1);  x0 = rand(rows,1);  tol = 1e-6;  maxit = uint32(rows);  n6_j = create_jacobi(rows);    [~, nos6_iter, nos6_res_vec] = p_cg(nos6, b, tol, maxit, x0, n6_j);    figure  semilogy(1:s3_iter, s3_res_vec, 1:nos5_iter, nos5_res_vec, 1:nos6_iter, nos6_res_vec);  title("Conjugate Gradient method");  xlabel("Iteration");  ylabel("Relative residual");  grid("on");  legend("s3 Matrix", "nos5 Matrix", "nos6 Matrix" );
endfunction
